// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgdelay.proto

#ifndef PROTOBUF_msgdelay_2eproto__INCLUDED
#define PROTOBUF_msgdelay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgdelay_2eproto();
void protobuf_AssignDesc_msgdelay_2eproto();
void protobuf_ShutdownFile_msgdelay_2eproto();

class msgdelay;

// ===================================================================

class msgdelay : public ::google::protobuf::Message {
 public:
  msgdelay();
  virtual ~msgdelay();

  msgdelay(const msgdelay& from);

  inline msgdelay& operator=(const msgdelay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msgdelay& default_instance();

  void Swap(msgdelay* other);

  // implements Message ----------------------------------------------

  msgdelay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msgdelay& from);
  void MergeFrom(const msgdelay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline float delay() const;
  inline void set_delay(float value);

  // optional string playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  inline void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:proto.msgdelay)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playerid_;
  float delay_;
  friend void  protobuf_AddDesc_msgdelay_2eproto();
  friend void protobuf_AssignDesc_msgdelay_2eproto();
  friend void protobuf_ShutdownFile_msgdelay_2eproto();

  void InitAsDefaultInstance();
  static msgdelay* default_instance_;
};
// ===================================================================


// ===================================================================

// msgdelay

// required float delay = 1;
inline bool msgdelay::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msgdelay::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msgdelay::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msgdelay::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline float msgdelay::delay() const {
  // @@protoc_insertion_point(field_get:proto.msgdelay.delay)
  return delay_;
}
inline void msgdelay::set_delay(float value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.msgdelay.delay)
}

// optional string playerid = 2;
inline bool msgdelay::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msgdelay::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msgdelay::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msgdelay::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& msgdelay::playerid() const {
  // @@protoc_insertion_point(field_get:proto.msgdelay.playerid)
  return *playerid_;
}
inline void msgdelay::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
  // @@protoc_insertion_point(field_set:proto.msgdelay.playerid)
}
inline void msgdelay::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.msgdelay.playerid)
}
inline void msgdelay::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.msgdelay.playerid)
}
inline ::std::string* msgdelay::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playerid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.msgdelay.playerid)
  return playerid_;
}
inline ::std::string* msgdelay::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msgdelay::set_allocated_playerid(::std::string* playerid) {
  if (playerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerid_;
  }
  if (playerid) {
    set_has_playerid();
    playerid_ = playerid;
  } else {
    clear_has_playerid();
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.msgdelay.playerid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgdelay_2eproto__INCLUDED
